project_path: /web/tools/workbox/_project.yaml
book_path: /web/tools/workbox/_book.yaml

landing_page:
  header:
    description: <!-- No Description -->

  rows:
  - custom_html: >
      <style>
        .button-primary {
          background-color: #fb8c00;
        }
        .workbox-heading {
          text-align: center;
        }

        .workbox-heading__logo {
          max-width: 640px;
          margin: 0 40px;
        }
      </style>
      <div class="workbox-heading">
      <p><img class="workbox-heading__logo" src="./images/Workbox-Logo-Grey.svg" alt="Workbox Logo" /></p>
      <p><a class="button button-primary" href="/web/tools/workbox/guides/get-started">Get started</a></p>
      </div>

  - background: grey
    items:
    - description: >
        Welcome! Workbox is a set of libraries that can power a production-ready
        <a href="https://web.dev/service-workers-cache-storage/">service worker</a>
        for your
        <a href="https://web.dev/progressive-web-apps/">Progressive Web App</a>.

  - custom_html: >
      <style>
        .workbox-columns {
          display: flex;
          flex-direction: column;
        }

        .workbox-columns__column {
          width: 100%;
          display: flex;
          flex-direction: row;
          align-items: center;
          margin: 8px 0;
        }

        .workbox-columns__column .row-icon {
          width: 120px;
          margin-right: 26px;
        }

        .workbox-columns__column .row-details {
          flex: 1;
        }

        @media (min-width: 700px) {
          .workbox-columns {
            flex-direction: row;
            justify-content: space-between;
          }

          .workbox-columns__column {
            width: 30%;
            flex-direction: column;
            margin: 0;
          }

          .workbox-columns__column .row-icon {
            width: auto;
            margin: 0;
          }
        }
      </style>
      <div class="workbox-columns">
        <div class="workbox-columns__column">
          <div class="row-icon">
            <img src="./images/performance.svg" alt="Performance Icon" />
          </div>
          <div class="row-details">
            <h3>Performance</h3>
            <p>Stop waiting on the network! You can improve your web app's performance by caching and serving your files, powered by a service worker.</p>
          </div>
        </div>
        <div class="workbox-columns__column">
          <div class="row-icon">
            <img src="./images/no-network.svg" alt="No Network Icon" />
          </div>
          <div class="row-details">
            <h3>Resilience</h3>
            <p>Even on an unreliable connection, your web app can still work using the right runtime caching strategies.</p>
          </div>
        </div>
        <div class="workbox-columns__column">
          <div class="row-icon">
            <img src="./images/pwa.svg" alt="Progressive Web App Logo" />
          </div>
          <div class="row-details">
            <h3>Enhancement</h3>
            <p>Looking to build a progressive web app? Workbox makes it easy to create an offline first experience.</p>
          </div>
        </div>
      </div>

  - heading: Why Workbox?
    background: grey
    items:
    - description: >
        <p>Workbox is a library that bakes in a set of best practices and removes the boilerplate every  developer writes when working with <a href="/web/fundamentals/primers/service-workers/">service workers</a>.</p>

        <ul>
          <li>Precaching</li>
          <li>Runtime caching</li>
          <li>Strategies</li>
          <li>Request routing</li>
          <li>Background sync</li>
          <li>Helpful debugging</li>
        </ul>

  - custom_html: >
      <h2>What's the API Like?</h2>
      <p>Below are a few examples of the Workbox API demonstrating some of
      the common approaches developers take in their service workers.</p>

      <h3>Cache Google Fonts</h3>

      <p>Wish you could rely on Google Fonts being available offline after the
      user has visited your site? Add a quick rule to serve them from the
      cache.</p>

      <pre class="prettyprint lang-javascript">
        import {ExpirationPlugin} from 'workbox-expiration';
        import {registerRoute} from 'workbox-routing';
        import {StaleWhileRevalidate} from 'workbox-strategies';

        // Cache Google Fonts with a stale-while-revalidate strategy, with
        // a maximum number of entries.
        registerRoute(
          ({url}) => url.origin === 'https://fonts.googleapis.com' ||
                     url.origin === 'https://fonts.gstatic.com',
          new StaleWhileRevalidate({
            cacheName: 'google-fonts',
            plugins: [
              new ExpirationPlugin({maxEntries: 20}),
            ],
          }),
        );
      </pre>

      <h3>Cache JavaScript and CSS</h3>
      <p>Make your JS and CSS ⚡ fast by returning the assets from the cache,
      while making sure they are updated in the background for the next use.</p>

      <pre class="prettyprint lang-javascript">
        import {registerRoute} from 'workbox-routing';
        import {StaleWhileRevalidate} from 'workbox-strategies';

        registerRoute(
          ({request}) => request.destination === 'script' ||
                         request.destination === 'style',
          new StaleWhileRevalidate()
        );
      </pre>

      <h3>Cache Images</h3>
      <p>Images carry most of the weight for a web page. Use this rule to
      serve them quickly from the cache, while making sure you don’t cache
      them indefinitely, consuming your users' storage.</p>

      <pre class="prettyprint lang-javascript">
        import {CacheableResponsePlugin} from 'workbox-cacheable-response';
        import {CacheFirst} from 'workbox-strategies';
        import {ExpirationPlugin} from 'workbox-expiration';
        import {registerRoute} from 'workbox-routing';

        registerRoute(
          ({request}) => request.destination === 'image',
          new CacheFirst({
            cacheName: 'images',
            plugins: [
              new CacheableResponsePlugin({
                statuses: [0, 200],
              }),
              new ExpirationPlugin({
                maxEntries: 60,
                maxAgeSeconds: 30 * 24 * 60 * 60, // 30 Days
              }),
            ],
          }),
        );
      </pre>

      <h3>Precache your Files</h3>
      <p>Use Workbox to precache assets in your web app using our CLI, Node
      module or webpack plugin.</p>

      <div class="ds-selector-tabs">
        <section>
          <div class="kd-tabbutton">CLI</div>
          <pre class="prettyprint lang-javascript">
        workbox wizard</pre>
        </section>
        <section>
          <div class="kd-tabbutton">Node Module</div>
          <pre class="prettyprint lang-javascript">
        const {generateSW} = require('workbox-build');

        generateSW({
          swDest: './build/sw.js',
          globDirectory: './app',
          globPatterns: '**/*.{js,css,html,png}',
        });</pre>
        </section>
        <section>
          <div class="kd-tabbutton">webpack</div>
          <pre class="prettyprint lang-javascript">
        const {GenerateSW} = require('workbox-webpack-plugin');

        module.exports = {
          // Other webpack config...
          plugins: [
            // Other plugins...
            new GenerateSW(),
          ]
        };</pre>
        </section>
      </div>

      <h3>Offline Google Analytics</h3>
      <p>Want offline analytics for your offline PWA? No problem.</p>

      <pre class="prettyprint lang-javascript">
        import * as googleAnalytics from 'workbox-google-analytics';

        googleAnalytics.initialize();
      </pre>

  - heading: "Workbox @ Chrome Dev Summit"
    background: grey
    items:
    - heading: ""
      description: >
        In this talk, <a href="https://twitter.com/jeffposnick">Jeff Posnick</a>
        gives an overview of Workbox's support for
        caching strategies, precaching, and handling navigation requests. It's
        filled throughout with real-world examples of how companies are using
        Workbox in production.
      youtube_id: DtuJ55tmjps

  - heading: "Case Studies"
    items:
    - heading: ""
      description: >
        <p>Learn more about how developers are using Workbox in production:</p>
        <ul>
          <li>
            <a href="https://medium.com/@addyosmani/a-tinder-progressive-web-app-performance-case-study-78919d98ece0">A Tinder Progressive Web App Performance Case Study</a>
          </li>
          <li>
            <a href="https://medium.com/dev-channel/a-pinterest-progressive-web-app-performance-case-study-3bd6ed2e6154">A Pinterest Progressive Web App Performance Case Study</a>
          </li>
          <li>
            <a href="https://web.dev/opensooq-case-study/">How OpenSooq increased engagement by investing in the web</a>
          </li>
          <li>
            <a href="https://web.dev/rakuten-24/">Rakuten 24’s investment in PWA increases user retention by 450%</a>
          </li>
        </ul>

  - heading: "Contributors"
    background: grey
    description: >
      <p>Workbox is built and maintained by a
      <a href="https://github.com/GoogleChrome/workbox/graphs/contributors">friendly bunch of contributors</a>,
      without whom none of this would be possible.</p>
