---
layout: article
title: "قياس مسار العرض الحرج باستخدام توقيت التنقل"
description: "لا يمكنك تحسين ما لا يمكنك قياسه. ولكن من حسن الطالع أن واجهة برمجة تطبيقات Navigation Timing تتيح لنا جميع الأدوات اللازمة لقياس كل خطوة في مسار العرض الحرج."
introduction: "لا يمكنك تحسين ما لا يمكنك قياسه. ولكن من حسن الطالع أن واجهة برمجة تطبيقات Navigation Timing تتيح لنا جميع الأدوات اللازمة لقياس كل خطوة في مسار العرض الحرج."
article:
  written_on: 2014-04-01
  updated_on: 2014-09-18
  featured: true
  order: 5
collection: critical-rendering-path
authors:
  - ilyagrigorik
key-takeaways:
  measure-crp:
    - توفر Navigation Timing  طوابع زمنية عالية الدقة لقياس CRP.
    - يرسل المتصفح سلسلة من الأحداث القابلة للاستهلاك لتحديد عدة مراحل من CRP.
---
{% wrap content%}

<style>
  img, video, object {
    max-width: 100%;
  }

  img.center {
    display: block;
    margin-left: auto;
    margin-right: auto;
  }
</style>

{% include modules/takeaway.liquid list=page.key-takeaways.measure-crp %}

يعتمد أساس كل إستراتيجية أداء ثابتة على القياس الجيد والأدوات المفيدة. وقد اتضح لنا أن هذا ما توفره واجهة برمجة تطبيقات Navigation Timing تحديدًا.

<img src="images/dom-navtiming.png" class="center" alt="Navigation Timing">

تمثل كل علامة من العلامات الواردة في الرسم البياني أعلاه طابعًا زمنيًا عالي الدقة يتتبعه المتصفح مع كل صفحة يحملها. وفي الحقيقة، في هذه الحالة تحديدًا لا نعرض سوى جزء من جميع الطوابع الزمنية المختلفة - ذلك أننا في الوقت الحالي نتخطى جميع الطوابع الزمنية المتعلقة بالشبكة، ولكننا سنتناولها في درس لاحق.

ولكن ما المقصود بهذه الطوابع الزمنية؟

* **domLoading:** هذا الطابع الزمني لبدء العملية بالكامل، حيث يكون المتصفح على وشك بدء تحليل وحدات بايت الأولى التي يتم الحصول عليها من HTML
  المستند.
* **domInteractive:** يحدد نقطة انتهاء المتصفح من تحليل كل بنية HTML وDOM
* **domContentLoaded:** يحدد نقطة استعداد DOM ووجود أوراق أنماط تحظر تنفيذ جافا سكريبت - مما يعني أنه يمكننا الآن (بشكل محتمل) إنشاء شجرة العرض.
    * تنتظر العديد من إطارات عمل جافا سكريبت هذا الحدث حتى تبدأ تنفيذ منطقها الخاص. لذلك يحدد المتصفح الطابعين الزمنيين _EventStart_ و_EventEnd_ للسماح لنا بتتبع المدة التي يستغرقها هذا التنفيذ.
* **domComplete:** كما يتضح من الاسم، تكتمل المعالجة ويكتمل تنزيل جميع الموارد على الصفحة (مثل الصور وما إلى ذلك) أي تتوقف أداة الانتقال في التحميل عن الانتقاء.
* **loadEvent:** كخطوة أخيرة عند تحميل كل صفحة، يشغِّل المتصفح حدث `onload` يمكنه تشغيل منطق تطبيق إضافي.

تحدد مواصفات HTML شروطًا معينة لكل حدث: للوقوف على وقت التشغيل وأي الشروط يجب توفرها وهكذا. وفقًا لأهدافنا، سنركز على بعض المعالم الرئيسية ذات الصلة بمسار العرض الحرج:

* **domInteractive** لتحديد وقت استعداد DOM.
* **domContentLoaded** يستخدم عادة لتحديد وقت [استعداد كل من DOM و CSSOM](http://calendar.perfplanet.com/2012/deciphering-the-critical-rendering-path/).
    * إذا لم يكن هناك جافا سكريبت يحظر المحلل، فسيتم تشغيل _documentContentLoaded_ في الحال بعد _domInteractive_.
* **domComplete** لتحديد وقت استعداد الصفحة وجميع مواردها الفرعية.

^

{% include_code _code/measure_crp.html full html %}

قد يبدو المثال الوارد أعلاه مفزعًا لأول وهلة، إلا أنه بسيط للغاية. تحدد واجهة برمجة تطبيقات Navigation Timing جميع الطوابع الزمنية ذات الصلة وتنتظر الشفرة الخاصة بنا بدء تشغيل الحدث `onload` event &mdash; تذكر أنه يتم تشغيل حدث onload بعد domInteractive وdomContentLoaded وdomComplete &mdash; كما تحسب الفرق بين الطوابع الزمنية المختلفة.
<img src="images/device-navtiming-small.png" class="center" alt="عرض تجريبي لـ NavTiming">

بعد أن أوضحنا كل شيء نظريًا وعمليًا، أصبحت لدينا الآن بعض المعالم التي يمكننا تتبعها ووظيفة بسيطة للحصول على هذه المقاييس. لاحظ أنه بدلاً من طباعة هذه المقاييس على الصفحة، يمكنك أيضًا تعديل الشفرة لإرسالها إلى خادم إحصائي ([Google Analytics يتولى تنفيذ ذلك تلقائيًا](https://support.google.com/analytics/answer/1205784?hl=ar))، وهي طريقة رائعة للحفاظ على أداء علامات التبويب في صفحاتك وتحديد الصفحات المرشحة التي يمكنها الاستفادة من بعض التحسين.

{% include modules/nextarticle.liquid %}

{% endwrap%}

