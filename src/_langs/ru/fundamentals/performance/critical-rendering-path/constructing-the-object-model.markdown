---
layout: article
title: "Создание модели DOM"
description: "Перед тем как вывести страницу на экран, браузер создает модели DOM и CSSOM. Поэтому мы должны предоставить браузеру кратчайший путь к HTML и CSS."
introduction: "Перед тем как вывести страницу на экран, браузер создает модели DOM и CSSOM. Поэтому мы должны предоставить браузеру кратчайший путь к HTML и CSS."
article:
  written_on: 2014-04-01
  updated_on: 2014-09-12
  order: 1
collection: critical-rendering-path
authors:
  - ilyagrigorik
key-takeaways:
  construct-object-model:
    - Байты → символы → разметка → узлы → объектная модель.
    - Браузер преобразует HTML-разметку в объектную модель документа (DOM), а CSS-разметку - в объектную модель таблицы стилей (CSSOM).
    - Модели DOM и CSSOM не зависят друг от друга.
    - Инструменты разработчика в Chrome позволяют записать и проанализировать этапы создания DOM и CSSOM.
notes:
  devtools:
    - Мы предполагаем, что вы немного знакомы с инструментами разработчика в Chrome и знаете, как сохранить динамический список элементов и записать события загрузки страницы. Подробную информацию об этих функциях можно найти в <a href="https://developer.chrome.com/devtools">документации для разработчиков</a>. Новичкам рекомендуем пройти онлайн-курс <a href="http://discover-devtools.codeschool.com/">Discover DevTools</a> (на английском языке).
---
{% wrap content%}

<style>
  img, video, object {
    max-width: 100%;
  }

  img.center {
    display: block;
    margin-left: auto;
    margin-right: auto;
  }
</style>

{% include modules/toc.liquid %}

{% include modules/takeaway.liquid list=page.key-takeaways.construct-object-model %}

## Модель DOM

{% include modules/udacity_player.liquid title="Learn about DOM construction" link="" videos="%5B%7B%22id%22%3A%20%22qjEyIpm6D_Q%22%7D%2C%20%7B%22id%22%3A%22jw4tVn7CRcI%22%7D%2C%20%7B%22id%22%3A%20%22oJQf6OGzVWs%22%2C%20%22autoPause%22%3A%20true%7D%2C%20%7B%22id%22%3A%22tJvAsE6UwoQ%22%2C%20%22autoPause%22%3A%20true%7D%5D" %}

{% include_code _code/basic_dom.html full %}

Возьмем самую простую веб-станицу с текстом без форматирования и одним изображением и посмотрим, как она обрабатывается в браузере.

<img src="images/full-process.png" alt="Создание модели DOM">

1. **Преобразование**. Браузер преобразует байты из HTML-файла, размещенного на диске или в сети, в символы, основываясь на приведенной в файле кодировке (например, UTF-8).
2. **Разметка**. На основании [стандарта W3C HTML5](http://www.w3.org/TR/html5/) браузер выделяет среди символов теги в угловых скобках, такие как <html>, <body> и другие. У каждого тега есть свое значение и свой набор правил.
3. **Создание объектов**. С помощью HTML-тегов браузер выделяет в документе объекты с определенными свойствами.
4. **Формирование DOM**. Объекты образуют древовидную структуру, повторяющую иерархию HTML-файла, в котором одни теги помещаются в другие. Так, объект _p_ помещается под _body_, а объект _body_, в свою очередь, под _html_, и так далее.

<img src="images/dom-tree.png" class="center" alt="Модель DOM">

**В результате образуется объектная модель документа (DOM), с помощью которой браузер продолжает обрабатывать страницу.**

Все эти действия (преобразование байтов в символы, определение разметки, создание объектов и формирование DOM) браузер должен выполнять каждый раз при обработке HTML-разметки. Этот процесс занимает некоторое время, особенно при обработке большого количества тегов.

<img src="images/dom-timeline.png" class="center" alt="Отслеживание формирования DOM с помощью инструментов разработчика">

{% include modules/remember.liquid title="Note" list=page.notes.devtools %}

Время, затрачиваемое на создание DOM, можно отслеживать с помощью функции Timeline в инструментах разработчика. На скриншоте выше видно, что для преобразования нашего HTML-кода в DOM браузеру понадобилось 5 мс. Конечно же, чем больше кода содержит страница, тем дольше длится обработка, что может вызывать проблемы - например, при создании плавной анимации. Но об этом вы узнаете из следующих разделов руководства.

Итак, наша модель DOM готова. Но для того чтобы вывести страницу на экран, одной структуры объектов недостаточно. Браузер также должен определить, как эти объекты выглядят. Поэтому рассмотрим следующий этап - формирование объектной модели таблицы стилей (CSSOM).

## Модель CSSOM

При формировании DOM браузер обнаружил в документе ссылку на таблицу стилей (style.css). Поскольку она необходима для визуализации страницы, браузер мгновенно отправляет на сервер запрос и получает в ответ следующий код:

{% include_code _code/style.css full css %}

Конечно, стили можно обозначать прямо в разметке. Однако поместив их в CSS-файл, мы разделяем задачи и позволяем дизайнерам работать над CSS, пока разработчики сосредоточены на HTML.

Чтобы обработать данные из CSS-файла, браузер должен выполнить те же самые действия, что и с HTML-документом:

<img src="images/cssom-construction.png" class="center" alt="Создание модели CSSOM">

Байты из CSS-файла преобразуются в символы, символы - в теги, а теги - в объекты, которые образуют модель CSSOM:

<img src="images/cssom-tree.png" class="center" alt="Модель CSSOM">

Почему CSSOM имеет древовидную структуру? Сначала браузер присваивает объекту правила, характерные для его родительского элемента, а затем - характерные только для него. Таким образом получается каскадный набор стилей.

Чтобы понять это правило, взгляните на схему выше. На ней видно, что любой текст, заключенный в тег _span_ внутри тега _body_, будет иметь размер 16 пикселей и будет выделен красным цветом. Правило, определяющее размер шрифта, перенесено в объект _span_ из _body_. При этом текст, помещенный в тег _span_ внутри параграфа _p_, подчиняется другому правилу и не отображается на странице.

Обратите внимание, что схема отражает модель CSSOM не полностью. На ней представлены только правила, замещающие стили по умолчанию, которые применяются браузерами при отсутствии CSS-файла и соответствующей HTML-разметки. См. [стили Internet Explorer](http://www.iecss.com/). Именно значения по умолчанию отображаются на вкладке Computed (По умолчанию) в инструментах разработчика.

Хотите узнать, сколько времени заняла обработка CSS-файла? Воспользуйтесь инструментами разработчика: запишите события загрузки на вкладке Timeline (Временная шкала) и найдите событие под названием Recalculate Style (Перерасчет стиля). В нем отображается время создания CSSOM и обработки стилей по умолчанию.

<img src="images/cssom-timeline.png" class="center" alt="Отслеживание формирования CSSOM с помощью инструментов разработчика">

Обработка нашей незамысловатой таблицы стилей заняла 0,6 мс и коснулась 8 объектов. Но почему при создании CSSOM браузер обрабатывал объекты, содержащиеся в другой модели - DOM? Об этом и пойдет речь в следующей главе. Из нее вы узнаете о модели визуализации, которая образуется из моделей DOM и CSSOM.

{% include modules/nextarticle.liquid %}

{% endwrap %}

