---
layout: article
title: "Улучшение отзывчивости с помощью медиазапросов CSS"
description: "Большинство интернет-ресурсов не оптимизировано для просмотра на разных типах устройств. Изучив основы, вы узнаете, как обеспечить одинаково хорошую работу сайта на телефонах, планшетах, домашних компьютерах... в общем, на любых устройствах, у которых есть экран."
introduction: "Медиазапросы - это простые фильтры, которые можно применять к стилям CSS.  Они позволяют изменять стили на основании характеристик устройства, связанных с отображением контента, включая тип, ширину, высоту, ориентацию и даже разрешение экрана."
article:
  written_on: 2014-04-30
  updated_on: 2014-09-12
  order: 3
authors:
  - petelepage
collection: rwd-fundamentals
key-takeaways:
  set-viewport:
    - Чтобы контролировать масштабирование окна просмотра в браузере, используйте метатег viewport.
    - Добавьте <code>width=device-width</code>, чтобы адаптировать ширину окна просмотра к экрану устройства.
    - Вставьте <code>initial-scale=1</code>, чтобы обеспечить соотношение 1:1 между пикселями CSS и независимыми пикселями устройства.
    - Чтобы страница была доступна, проверьте, не отключено ли пользовательское масштабирование.
  size-content-to-vp:
    - Не используйте крупные элементы с фиксированной шириной.
    - Для корректного отображения контента не ограничивайте его определенной шириной области просмотра.
    - Используйте медиазапросы CSS, чтобы указать разные стили для больших и маленьких экранов.
  media-queries:
    - Медиазапросы также позволяют выбрать стиль на основе характеристик устройства.
    - Добавьте <code>min-width</code> вместо <code>min-device-width</code> для корректного отображения сайта на большинстве устройств.
    - Чтобы не нарушать структуру макета, используйте элементы относительных размеров.
  choose-breakpoints:
    - Создавайте контрольные точки на основе контента, а не для отдельных устройств, продуктов или брендов.
    - Сначала разработайте дизайн для самого маленького мобильного устройства, а затем переходите к версиям для больших экранов.
    - Ограничьте длину строк 70-80 символами.
remember:
  use-commas:
    - Разделяйте атрибуты запятыми, чтобы устаревшие версии браузеров могли их правильно интерпретировать.
---
{% wrap content %}

<style>
  .smaller-img {
    width: 60%;
    display: block;
    margin-left: auto;
    margin-right: auto;
  }

  img.center {
    display: block;
    margin-left: auto;
    margin-right: auto;
  }

  video.responsiveVideo {
    width: 100%;
  }
</style>


{% include modules/toc.liquid %}

{% include modules/takeaway.liquid list=page.key-takeaways.media-queries %}


Например, вы можете поместить в медиазапрос print все стили, необходимые для печати:

{% highlight html %}
<link rel="stylesheet" href="print.css" media="print">
{% endhighlight %}

Кроме использования атрибут media в ссылке на таблицу стилей существует ещё два способа применить медиазапросы @media и @import, которые можно встроить в файл CSS:  Приоритет отдается первым двум методам, более эффективным, чем синтаксис @import (см. [Избегайте правила @import]({{site.fundamentals}}/performance/critical-rendering-path/page-speed-rules-and-recommendations.html)).

{% highlight css %}
@media print {
  /* print style sheets go here */
}

@import url(print.css) print;
{% endhighlight %}

Логика медиазапросов не является взаимоисключающей, поэтому к блоку CSS применяются все фильтры, отвечающие его критериям. Порядок применения фильтров обусловлен стандартными правилами CSS.

## Применение медиазапросов на основе размера области просмотра

С помощью медиазапросов можно создать отзывчивую среду, в которой к каждому размеру экрана будут применяться подходящие стили.  Синтаксис медиазапросов допускает создание правил, которые применяются на основании характеристик устройства.

{% highlight css %}
@media (query) {
  /* CSS Rules used when query matches */
}
{% endhighlight %}

В отзывчивом веб-дизайне наиболее часто используются функции min-width, max-width, min-height и max-height (хотя возможны и другие запросы).


<table class="table-2">
  <colgroup>
    <col span="1">
    <col span="1">
  </colgroup>
  <thead>
    <tr>
      <th data-th="атрибут">Атрибут</th>
      <th data-th="результат">Результат</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td data-th="атрибут"><code>min-width</code></td>
      <td data-th="результат">Правило применяется к браузеру, ширина которого больше значения, указанного в запросе.</td>
    </tr>
    <tr>
      <td data-th="атрибут"><code>max-width</code></td>
      <td data-th="результат">Правило применяется к браузеру, ширина которого меньше значения, указанного в запросе.</td>
    </tr>
    <tr>
      <td data-th="атрибут"><code>min-height</code></td>
      <td data-th="результат">Правило применяется к браузеру, высота которого больше значения, указанного в запросе.</td>
    </tr>
    <tr>
      <td data-th="атрибут"><code>max-height</code></td>
      <td data-th="результат">Правило применяется к браузеру, высота которого меньше значения, указанного в запросе.</td>
    </tr>
    <tr>
      <td data-th="атрибут"><code>orientation=portrait</code></td>
      <td data-th="результат">Правило применяется к браузеру, высота которого не меньше его ширины.</td>
    </tr>
    <tr>
      <td data-th="атрибут"><code>orientation=landscape</code></td>
      <td data-th="результат">Правило применяется к браузеру, ширина которого больше высоты.</td>
    </tr>
  </tbody>
</table>

Рассмотрим пример:

<figure>
  {% link_sample _code/media-queries.html %}
    <img src="imgs/mq.png" class="center" srcset="imgs/mq.png 1x, imgs/mq-2x.png 2x" alt="Просмотр страницы, использующей медиазапросы джля корректировки при изменении размеров.">
  {% endlink_sample %}
</figure>

{% include_code _code/media-queries.html mqueries %}

* При ширине браузера от <b>0 пикс.</b> до <b>640 пикс.</b> применяется max-640px.css.
* При ширине браузера от <b>500 пикс.</b> до <b>600 пикс.</b> применяются стили из @media.
* При ширине браузера <b>от 640 пикс. и выше</b> применяется min-640px.css.
* Если в браузере <b>ширина больше высоты</b>, применяется landscape.css.
* Если в браузере <b>высота больше ширины</b>, применяется portrait.css.


## Примечание к min-device-width

Также возможно создание запросов на основании *-device-width, хотя делать это **настоятельно не рекомендуется**.

Разница небольшая, но очень важная: min-width исходит из размера окна браузера, а min-device-width - из размера экрана устройства.  К сожалению, некоторые браузеры (включая устаревшую версию браузера для Android) не всегда правильно определяют ширину области просмотра и вместо нее могут сообщить размер экрана в пикселях устройства.

К тому же, использование *-device-width может помешать контенту подстроиться под экран обычного компьютера или другого устройства, на котором можно изменить размер окна. Причина в том, что этот запрос основан на размере конкретного устройства, а не окна браузера.

## Использование относительных единиц

Основной принцип отзывчивого веб-дизайна (и главное отличие от макетов с фиксированной шириной) - подвижность и пропорциональность.  Использование относительных размеров помогает упростить макет и предотвратить случайное создание компонентов, не вмещающихся в область просмотра.

Например, установка параметра width равным 100% для блока div верхнего уровня приведет к тому, что он будет заполнять всю ширину области просмотра и никогда не будет слишком мал или велик для нее.  Блок div в любом случае будет соответствовать экрану, будь то iPhone (320 пикс.), Blackberry Z10 (342 пикс.) или Nexus 5 (360 пикс.).

Кроме того, использование относительных единиц позволяет браузерам отображать контент, исходя из пользовательского масштаба. Это значит, что горизонтальная панель прокрутки на странице не понадобится.

<div class="clear">
  <div class="g--half">
    <h2 class="text-danger text-center">NO</h2>
{% highlight css %}div.fullWidth {
  width: 320px;
  margin-left: auto;
  margin-right: auto;
}{% endhighlight %}
  </div>

  <div class="g--half g--last">
    <h2 class="text-success text-center">YES</h2>
{% highlight css %}div.fullWidth {
  width: 100%;
}{% endhighlight %}
  </div>
</div>

{% include modules/nextarticle.liquid %}

{% endwrap %}

