---
layout: article
title: "Изображения в разметке"
description: "Элемент img выполняет много функций: он загружает, декодирует и визуализирует контент. Современные браузеры поддерживают целый ряд разных форматов изображений."
introduction: "Элемент <code>img</code> выполняет много функций: он загружает, декодирует и визуализирует контент. Современные браузеры поддерживают несколько форматов изображений.  Многие изображения работают на разных устройствах, независимо от параметров экрана. Ниже мы расскажем, как добиться наилучших результатов."
authors:
  - petelepage
article:
  written_on: 2014-04-30
  updated_on: 2014-09-30
  order: 1
collection: images
key-takeaways:
  img-in-markup:
    - Указывайте относительные размеры изображения, чтобы оно оставалось в границах контейнера.
    - Используйте элемент <code>picture</code>, чтобы показывать разные изображения с учетом параметров устройства (эффект art direction).
    - Используйте атрибут <code>srcset</code> и дескриптор <code>x</code> в элементе <code>img</code>: при наличии нескольких вариантов браузеру будет проще выбрать нужное изображение.
remember:
  picture-support:
    - Элемент <code>picture</code> начинает поддерживаться в браузерах.
      Несмотря на то, что этот элемент поддерживают ещё не все браузеры, мы тем не менее рекомендуем использовать его. Он хорошо совместим с предыдущими версиями, и в дальнейшем его можно будет применять с изображениями <a href="http://picturefill.responsiveimages.org/">Picturefill polyfill</a>.
      Дополнительную информацию вы найдете на сайте <a href="http://responsiveimages.org/#implementation">ResponsiveImages.org</a>. 
  compressive:
    -С осторожностью используйте техники сжатия, так как они занимают больше памяти и требуют затрат на декодирование.  Адаптация крупных изображений для небольших экранов - ресурсоемкий процесс. Он может вызвать проблемы в работе низкопроизводительных устройств с небольшим объемом памяти и ограниченными возможностями обработки данных.
shortlinks: 
  # NOTE: If the section titles or URL changes the following shortlinks must be updated
  - g.co/mobilesiteprinciple21
---

{% wrap content%}

<style>
  img, video, object {
    max-width: 100%;
  }

  img.center {
    display: block;
    margin-left: auto;
    margin-right: auto;
  }
  img.phone {
    max-height: 500px;
    
  }
</style>

{% include modules/toc.liquid %}

{% include modules/takeaway.liquid list=page.key-takeaways.img-in-markup %}


## Указывайте относительные размеры изображения

Указывая размеры изображения, применяйте относительные величины, чтобы оно не выходило за пределы области просмотра.  Например, при параметре width: 50%; изображение в ширину будет занимать 50% вмещаемого элемента (а не области просмотра или актуального размера в пикселях).

Технология CSS допускает выход контента за пределы контейнеров. Избежать этого поможет параметр max-width: 100%.  Например:

{% highlight css %}
img, embed, object, video {
  max-width: 100%;
}
{% endhighlight %}

Убедитесь, что в элементы img добавлены значимые дескрипторы с помощью атрибута alt. Они создадут контекст для программ для чтения с экрана и других вспомогательных технологий, и в результате пользователям будут легче находить ваш сайт.

## Устройства с экранами высокого разрешения: добавьте к элементу img атрибут srcset

<div class="clear">
  <div class="g--half">
    <p>
      Атрибут <code>srcset</code> расширяет функциональные возможности элемента <code>img</code>. Благодаря ему вам будет проще назначать изображения с учетом параметров устройства. Как и в случае с <code>image-set</code> <a href="images-in-css.html#use-image-set-to-provide-high-res-images">(функция CSS)</a>, атрибут <code>srcset</code> позволяет браузеру выбирать наиболее подходящее изображение в зависимости от характеристик устройства. Например, использовать изображения 2x на экране 2x и, потенциально, изображения 1x на устройстве 2x при ограниченной пропускной способности сети.
    </p>
  </div>

  <div class="g--half g--last">
    {% include modules/video.liquid id="Pzc5Dly_jEM" %}
  </div>
</div>

{% highlight html %}
<img src="photo.png" srcset="photo@2x.png 2x" ...>
{% endhighlight %}

Если браузер не поддерживает атрибут srcset, по умолчанию файл с изображением импортируется с помощью атрибута src.  Вот почему так важно включать изображение 1x, которое может отображаться на любых устройствах, независимо от их свойств.  Если браузер поддерживает атрибут srcset, вы можете определять список источников изображений и условий (через запятую) до поступления запроса. В результате загружаются и выводятся на экран только те изображения, которые соответствуют параметрам устройства.

Вы можете задать любые условия, от плотности пикселей до ширины и высоты изображения, однако в настоящий момент хорошо поддерживается только параметр плотности пикселей.  Чтобы текущие функциональные возможности не вошли в противоречие с будущими разработками, продолжайте назначать этому атрибуту изображение 2x.

## Эффект art direction в отзывчивых изображениях с элементом picture

Если вы хотите, чтобы изображения менялись в зависимости от характеристик устройства (эффект art direction), воспользуйтесь элементом picture.  Элемент <code>picture</code> задает декларативное решение для обеспечения нескольких версий одного изображения в зависимости от различных характеристик устройства: размера, разрешения, назначения и т. д.

<img class="center" src="img/art-direction.png" alt="Пример эффекта art direction"
srcset="img/art-direction.png 1x, img/art-direction-2x.png 2x">

{% include modules/remember.liquid title="Important" list=page.remember.picture-support %}

<div class="clear">
  <div class="g--half">
    <p>
      Используйте элемент <code>picture</code>, если у источника изображения несколько вариантов плотности пикселей, а также если в рамках отзывчивого веб-дизайна для некоторых типов экранов назначаются изображения с различающимися характеристиками.  Как и в случае с <code>video</code>, вы можете указать несколько элементов <code>source</code> и назначать разные файлы изображений для разных медиазапросов или форматов изображений.
    </p>
  </div>
  <div class="g--half g--last">
    {% include modules/video.liquid id="QINlm3vjnaY" %}
  </div>
</div>

{% include_code _code/media.html picture html %}

В приведенном выше примере при ширине браузера не менее 800 пикселей будет использован формат head.jpg или head-2x.jpg (в зависимости от разрешения экрана устройства). Если ширина браузера от 450 до 800 пикселей, применяются форматы head-small.jpg или head-small-2x.jpg (также в зависимости от разрешения экрана устройства). Если речь идет о ширине экрана менее 450 пикселей и устройстве с нисходящей совместимостью, элемент picture поддерживаться не будет. В этом случае для вывода изображения на экран браузер использует элемент img (он должен быть включен).

### Изображения с относительными размерами

Если финальный размер изображения неизвестен, довольно сложно выбрать дескриптор плотности пикселей для источников изображений.  Это, в частности, относится к изображениям, которые растягиваются пропорционально ширине браузера и изменяют свои размеры в зависимости от нее.

Мы советуем не указывать фиксированные размеры изображения и плотность пикселей. Вместо этого вы можете определять размер обрабатываемого изображения, добавив дескриптор width. Это позволит браузеру автоматически вычислить оптимальную плотность пикселей и выбрать корректное изображение для загрузки.

{% include_code _code/sizes.html picture html %}

Выше приведено изображение, которое занимает половину ширины области просмотра (sizes="50vw") и зависит от ширины браузера и его соотношения логических и физических пикселей. В результате браузер может выбрать изображение, которое будет корректно отображаться в окне любого размера.  В приведенной ниже таблице показано, каким может быть этот выбор.

<table class="table-4">
  <colgroup>
    <col span="1">
    <col span="1">
    <col span="1">
    <col span="1">
  </colgroup>
  <thead>
    <tr>
      <th data-th="Ширина браузера">Ширина браузера</th>
      <th data-th="Соотношение логических и физических пикселей на устройстве">Соотношение логических и физических пикселей на устройстве</th>
      <th data-th="Использованное изображение">Использованное изображение</th>
      <th data-th="Эффективная разрешающая способность">Эффективная разрешающая способность</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td data-th="Ширина браузера">400 пикселей</td>
      <td data-th="Соотношение логических и физических пикселей на устройстве">1</td>
      <td data-th="Использованное изображение"><code>200.png</code></td>
      <td data-th="Эффективная разрешающая способность">1x</td>
    </tr>
    <tr>
      <td data-th="Ширина браузера">400 пикселей</td>
      <td data-th="Соотношение логических и физических пикселей на устройстве">2</td>
      <td data-th="Использованное изображение"><code>400.png</code></td>
      <td data-th="Эффективная разрешающая способность">2x</td>
    </tr>
    <tr>
      <td data-th="Ширина браузера">320 пикселей</td>
      <td data-th="Соотношение логических и физических пикселей на устройстве">2</td>
      <td data-th="Использованное изображение"><code>400.png</code></td>
      <td data-th="Эффективная разрешающая способность">2,5x</td>
    </tr>
    <tr>
      <td data-th="Ширина браузера">600 пикселей</td>
      <td data-th="Соотношение логических и физических пикселей на устройстве">2</td>
      <td data-th="Использованное изображение"><code>800.png</code></td>
      <td data-th="Эффективная разрешающая способность">2,67x</td>
    </tr>
    <tr>
      <td data-th="Ширина браузера">640 пикселей</td>
      <td data-th="Соотношение логических и физических пикселей на устройстве">3</td>
      <td data-th="Использованное изображение"><code>1000.png</code></td>
      <td data-th="Эффективная разрешающая способность">3,125x</td>
    </tr>
    <tr>
      <td data-th="Ширина браузера">1100 пикселей</td>
      <td data-th="Соотношение логических и физических пикселей на устройстве">1</td>
      <td data-th="Использованное изображение"></td>
      <td data-th="Эффективная разрешающая способность">1,27x</td>
    </tr>
  </tbody>
</table>


### Создание точек останова в отзывчивых изображениях

В некоторых случаях размер или изображение могут изменяться в зависимости от точек останова, заданных в шаблоне сайта.  Например, вам нужно будет, чтобы на маленьких экранах изображение занимало всю область просмотра, а на экранах более крупного формата достаточно будет небольшой части.  

{% include_code _code/breakpoints.html picture html %}

В приведенном выше примере атрибут sizes определяет размеры изображения с помощью различных медиазапросов.  Если размер окна браузера превышает 600 пикселей, изображение будет занимать 25% области просмотра. При размере браузера от 500 до 600 пикселей это значение увеличивается до 50%, а при размере меньше 500 пикселей изображение становится полноэкранным.


## Используйте масштабируемое изображение товара

Люди хотят видеть, что они покупают.  Им важно, чтобы на сайтах онлайн-магазинов были представлены крупные изображения товаров в высоком разрешении, чтобы можно было рассмотреть их в деталях. Согласно [проведенным исследованиям] (/web/fundamentals/principles/research-study.html), отсутствие такой возможности снижает лояльность покупателей.

<figure>
  <img src="img/sw-make-images-expandable-good.png" srcset="img/sw-make-images-expandable-good.png 1x, img/sw-make-images-expandable-good-2x.png 2x" alt="Веб-сайт марки J.Crew с масштабируемым изображением товара">
  <figcaption>Веб-сайт марки J.Crew с масштабируемым изображением товара</figcaption>
</figure>

Хороший пример изображения, которое увеличивается при нажатии на него, представлен на сайте марки J.Crew. Окно с подсказкой сообщает пользователю, что он может рассмотреть товар во всех деталях, просто нажав на изображение.


## Другие способы публикации изображений

### Сжатые изображения

Техника [сжатия
изображений](http://www.html5rocks.com/en/mobile/high-dpi/#toc-tech-overview) предназначена для высокого сжатия изображений 2x при передаче на любые устройства, независимо от их параметров.  В зависимости от типа изображения и степени сжатия качество изображения может не претерпеть заметных изменений, однако размер файла значительно уменьшится.

{% link_sample _code/compressive.html %}
Пример
{% endlink_sample %}

{% include modules/remember.liquid title="Important" list=page.remember.compressive %}

### Замена текста изображением в JavaScript

Техника замещения текста изображением в JavaScript выявляет характеристики устройства и предлагает оптимальное решение. Вы можете определить соотношение логических и физических пикселей через величину window.devicePixelRatio, задать ширину и высоту экрана и, потенциально, установить проверку сетевого соединения через navigator.connection или с помощью поддельного запроса. Когда вся необходимая информация будет собрана, вы сможете выбрать изображение для загрузки.

Основной недостаток этой техники в том, что загрузка изображения приостанавливается до окончания работы анализатора предпросмотра. Это значит, что загрузка изображений начнется только после завершения события pageload. Кроме того, браузер с большой вероятностью загрузит изображение обоих видов, 1x и 2x, и в результате вес страницы увеличится.

{% include modules/nextarticle.liquid %}

{% endwrap %}

