---
layout: article
title: "Как добавить видео"
description: "Узнайте, как легко и просто добавить видео на свой сайт, чтобы пользователи на любом устройстве получили удовольствие от его просмотра."
introduction: "В этой статье вы найдете информацию о том, как легко и просто добавить видео на свой сайт, чтобы пользователи на любом устройстве получили удовольствие от его просмотра."
article:
  written_on: 2014-04-16
  updated_on: 2014-04-29
  order: 1
collection: videos
authors:
  - samdutton
key-takeaways:
  add-a-video:
    - Используйте элемент video для загрузки, декодирования и воспроизведения видео на своем сайте.
    - Запишите видео в нескольких форматах, адаптированных под различные мобильные платформы.
    - Установите корректный размер видеофайлов; он не должен превышать максимальный размер контейнеров.
    - Контент должен быть доступен пользователям с ограниченными возможностями. Добавьте track как дочерний элемент video.
remember:
  media-fragments:
    - Media Fragments API поддерживается большинством платформ за исключением iOS.
    - Убедитесь, что ваш сервер поддерживает запросы с диапазонами. Запросы с диапазонами по умолчанию включены на большинстве серверов, однако некоторые хостинги отключают их.
  dont-overflow:
    - При изменении размеров элемента не нарушайте изначального соотношения ширины и высоты видео. Сплющенное или вытянутое изображение выглядит не лучшим образом.
  accessibility-matters:
    - Элементы track поддерживаются в Chrome для Android, iOS Safari и всех существующих в настоящее время браузерах для ПК за исключением Firefox (более подробную информацию вы найдете по адресу <a href="http://caniuse.com/track" title="Браузеры, поддерживающие элементы track">caniuse.com/track</a>). Вы также можете использовать полизаполнения. Мы рекомендуем <a href='//www.delphiki.com/html5/playr/' title='Полизаполнение Playr'>Playr</a> или <a href='//captionatorjs.com/' title='Полизаполнение Captionator'>Captionator</a>.
  construct-video-streams:
    - MSE поддерживаются в браузерах Chrome и Opera для Android, а также в Internet Explorer 11 и Chrome для ПК. В будущем планируется добавить поддержку <a href='http://wiki.mozilla.org/Platform/MediaSourceExtensions' title='Сроки внедрения поддержки Media Source Extensions в Firefox'>Firefox</a>.
  optimize:
    - <a href="../images/">Изображения</a>
    - <a href="../../performance/optimizing-content-efficiency/">Оптимизация контента</a>
---

{% wrap content%}

{% include modules/toc.liquid %}

<style>

  img, video, object {
    max-width: 100%;
  }

  img.center {
    display: block;
    margin-left: auto;
    margin-right: auto;
  }

</style>

{% include modules/takeaway.liquid list=page.key-takeaways.add-a-video %}

## Добавьте элемент video

Добавьте элемент video для загрузки, декодирования и воспроизведения видео на вашем сайте:

<video controls>
     <source src="video/chrome.webm" type="video/webm">
     <source src="video/chrome.mp4" type="video/mp4">
     <p>Этот браузер не поддерживает элемент video.</p>
</video>

{% highlight html %}
<video src="chrome.webm" type="video/webm">
    <p>Ваш браузер не поддерживает элемент video.</p>
</video>
{% endhighlight %}

## Укажите несколько форматов видеофайла

Не все браузеры поддерживают одни и те же форматы видеофайлов.
Элемент <source> позволяет указать несколько форматов видеофайла в качестве резервных, если браузер на устройстве пользователя не поддерживает какой-либо из них.
Ниже приведен пример.

{% include_code _code/video-main.html sourcetypes %}

Когда браузер анализирует теги <source>, он использует дополнительный атрибут type для определения, какой файл загрузить и воспроизвести. Если браузер поддерживает формат WebM, он воспроизведет файл chrome.webm. Если нет, браузер попытается вопроизвести видеофайлы в формате MPEG-4.
Ознакомьтесь с <a href='//www.xiph.org/video/vid1.shtml' title='Увлекательный и очень полезный путеводитель по миру цифрового видео'>Учебником по цифровым медиа для гиков</a> . В нем вы найдете подробную информацию о том, как работают аудио- и видеофайлы в Сети.

Подобный подход имеет целый ряд преимуществ по сравнению с использованием скриптов HTML или исполнением скриптов на сервере, особенно в среде мобильных устройств:

* Разработчики могут перечислить форматы в порядке их предпочтительности.
* Снижение времени реакции за счет переключения на стороне клиента. Для получения контента делается только один запрос.
* Проще, быстрее и надежнее дать самому браузеру выбрать формат, чем использовать поддерживаемую сервером базу данных с распознаванием на стороне пользовательского агента.
* Указание типа источника каждого файла повышает производительность сети. Браузер может выбрать источник видео, не прибегая к загрузке части файла для опознания формата.

Все эти факторы особенно важны в среде мобильных устройств, где пропускная способность и время реакции буквально на вес золота, а терпение пользователя не бесконечно. 
Отсутствие атрибута type повлияет на производительность в случае, если вы используете несколько источников неподдерживаемых типов.

С помощью инструментов разработчика вашего мобильного браузера сравните операции сетевого трафика {% link_sample _code/video-main.html %}с использованием атрибута type{% endlink_sample %} и {% link_sample _code/notype.html %}без него{% endlink_sample %}.
Также проверьте заголовки ответов в инструментах разработчика вашего браузера, чтобы удостовериться, что [ваш сервер сообщает правильный тип MIME](//developer.mozilla.org/en/docs/Properly_Configuring_Server_MIME_Types). В ином случае проверка типа источника видео не сработает.

## Укажите время начала и окончания

Чтобы сохранить пропускную способность и сделать сайт более быстрым, используйте Media Fragments API для определения времени начала и окончания элемента video.

<video controls>
  <source src="video/chrome.webm#t=5,10" type="video/webm">
  <source src="video/chrome.mp4#t=5,10" type="video/mp4">
  <p>Этот браузер не поддерживает элемент video.</p>
</video>

Для добавления медиафрагмента просто укажите `#t=[start_time][,end_time]` в URL медиафайла. Например, чтобы воспроизвести фрагмент видео с 5 по 10 секунду, укажите:

{% highlight html %}
<source src="video/chrome.webm#t=5,10" type="video/webm">
{% endhighlight %}

Вы также можете использовать Media Fragments API для просмотра различных фрагментов одного и того же видео (например, как на DVD) без кодирования и загрузки нескольких файлов.

{% include modules/remember.liquid title="Note" list=page.remember.media-fragments %}

В заголовках ответов должно стоять "Accept Ranges: bytes" (вы можете проверить это с помощью инструментов разработчика вашего браузера):

<img class="center" alt="Скриншот инструментов разрабочика Chrome: Accepts-Ranges: bytes" src="images/Accept-Ranges-Chrome-Dev-Tools.png">

## Добавьте постер

Добавьте в элемент video атрибут poster. Благодаря этому пользователи смогут сразу же получить общее представление о контенте. Им не надо будет загружать видео полностью или начинать просматривать его.

{% highlight html %}
<video poster="poster.jpg" ...>
  ...
</video>
{% endhighlight %}

Постер также может пригодиться, если элемент src указан некорректно или браузер не поддерживает ни один из предложенных форматов видео. Единственным недостатком использования постеров является дополнительный запрос файла, который незначительно снижает пропускную способность и требует обработки. Дополнительную информацию вы можете найти в [этой статье по оптимизации изображений](../../performance/optimizing-content-efficiency/optimize-encoding-and-transfer.html#image-optimization).

Ниже представлены для сравнения два видео - без постера и с постером. Мы сделали постер черно-белым, чтобы пользователь мог сразу понять, что это не само видео:

<div class="clear">
  <div class="g--half">
    <img class="center" alt="Скриншот Android Chrome, вертикальная ориентация: без постера" src="images/Chrome-Android-video-no-poster.png">
  </div>

  <div class="g--half g--last">
    <img class="center" alt="Скриншот Android Chrome, вертикальная ориентация: с постером" src="images/Chrome-Android-video-poster.png">
  </div>
</div>

{% include modules/nextarticle.liquid %}

{% endwrap %}

