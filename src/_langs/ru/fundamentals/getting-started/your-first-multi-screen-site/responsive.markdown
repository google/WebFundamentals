---
layout: article
title: "Сделайте дизайн сайта отзывчивым"
description: "Пользователи заходят в Интернет с различных устройств, начиная от смартфонов и заканчивая стационарными компьютерами. Узнайте, как создать сайт, который будет хорошо отображаться на экране любого формата."
introduction: "Пользователи заходят в Интернет с различных устройств, начиная от смартфонов и заканчивая стационарными компьютерами. У каждого устройства есть свои преимущества и недостатки. Ваша задача как веб-разработчика — сделать сайт удобным для любых устройств."
key-takeaways:
  make-responsive:
    - Всегда используйте метаэлемент viewport.
    - Всегда начинайте с разработки версии для узких экранов.
    - Внедряйте точки разрыва, если контент на странице начал выглядеть неаккуратно.
    - Разработайте высокоуровневый дизайн вашей разметки для различных точек разрыва.
authors:
  - paulkinlan
translators:
related-guides:
  responsive:
    -
      title: Работа с метаэлементом viewport
      href: fundamentals/layouts/rwd-fundamentals/set-the-viewport
      section:
        title: "Отзывчивый веб-дизайн"
        href: fundamentals/layouts/rwd-fundamentals/set-the-viewport
    -
      title: Масштабирование контента для наилучшего отображения в области просмотра
      href: fundamentals/layouts/rwd-fundamentals/size-content-to-the-viewport
      section:
        id: rwd-fundamentals
        title: "Отзывчивый веб-дизайн"
        href: fundamentals/layouts/rwd-fundamentals/size-content-to-the-viewport
  first-break-point:
    -
      title: Использование медиазапросов
      href: fundamentals/layouts/rwd-fundamentals/use-media-queries
      section:
        id: rwd-fundamentals
        title: "Отзывчивый веб-дизайн"
        href: fundamentals/layouts/rwd-fundamentals/use-media-queries
    -
      title: Адаптивные паттерны разметки
      href: fundamentals/layouts/rwd-patterns/
      section:
        id: rwd-patterns
        title: "Адаптивные паттерны разметки"
        href: fundamentals/layouts/rwd-patterns/
    -
      title: Паттерн Mostly Fluid
      href: fundamentals/layouts/rwd-patterns/mostly-fluid
      section:
        id: rwd-patterns
        title: "Отзывчивый веб-дизайн"
        href: fundamentals/layouts/rwd-patterns/mostly-fluid
  images:
    -
      title: "Использование улучшенных изображений с srcset для устройств с высоким DPI"
      href: fundamentals/media/images/images-in-markup.html#enhance-imgs-with-srcset-for-high-dpi-devices
      section:
        id: images
        title: "Изображения"
        href: media/images/
    - 
      title: "Чтобы загружать изображения в высоком разрешении, используйте медиазапросы"
      href: fundamentals/media/images/images-in-css.html#use-media-queries-for-conditional-image-loading-or-art-direction
      section:
        id: images
        title: "Изображения"
        href: media/images/

notes:
  styling:
    - основываясь на правилах использования бренда, мы составили базу стилей, описывающих цвет, отступ и шрифт на сайте;
  not-all-at-once:
    - нет необходимости перемещать все элементы сразу: вносите изменения постепенно.
article:
  written_on: 2014-04-17
  updated_on: 2014-04-23
  order: 2
collection: multi-screen
id: multi-screen-responsive
---

{% wrap content %}

{% include modules/toc.liquid %}

Наша задача — сделать сайт, который будет открываться на любых устройствах. В [предыдущей главе]{{site.baseurl}}{{page.article.previous.url}} мы разработали информационную архитектуру сайта и создали его базовую структуру.
В этой главе мы продолжим работу со структурой и контентом. Мы также объясним, как улучшить внешний вид страницы и сделать его доступным для любых экранов.

<div class="clear">
  <figure class="g-wide--2 g-medium--half">
    <img  src="images/content.png" alt="Контент" style="max-width: 100%;">
    <figcaption>{% link_sample _code/content-without-styles.html %}Контент и структура{% endlink_sample %} </figcaption>
  </figure>
  <figure class="g-wide--2 g-wide--last g-medium--half g--last">
    <img  src="images/narrowsite.png" alt="Designed site" style="max-width: 100%;">
    <figcaption>{% link_sample _code/content-with-styles.html %} Конечная версия сайта {% endlink_sample %} </figcaption>
  </figure>
</div>

Мы следуем принципу Mobile first и сначала разрабатываем версию для устройств с узким экраном.
Затем переходим к созданию версии для более широких экранов:
постепенно увеличиваем ширину окна конструирования и оцениваем, насколько удачно выглядит страница при новых параметрах.

Ранее мы создали несколько вариантов высокоуровневых проектов. В каждом из них контент располагался по-разному. Теперь необходимо адаптировать страницу к этим проектам.
Для этого определим, где будут располагаться точки разрыва (определенные размеры экрана, при которых меняется стиль и верстка).

{% include modules/takeaway.liquid list=page.key-takeaways.make-responsive %}

## Добавление тега viewport

Даже создавая самые простые страницы, вы **всегда должны** включать в код метатег viewport.
Он является самым важным компонентом в отзывчивом веб-дизайне.
Без него ваш сайт будет плохо выглядеть на мобильных устройствах.

Тег viewport сообщает браузеру, что масштаб страницы необходимо изменить, чтобы она полностью помещалась на экране. Вы можете задать несколько параметров для этого тега. Мы рекомендуем следующие параметры по умолчанию:

{% include_code _code/viewport.html viewport %}

Помещать тег viewport нужно только один раз в раздел head.

{% include modules/related_guides.liquid inline=true list=page.related-guides.responsive %}

## Применение простых стилей

В нашей компании уже разработаны инструкции по работе со шрифтами и оформлением; они описаны в руководстве по стилю.

### Руководство по стилю

В таком руководстве понятно и доступно объясняются правила и нюансы работы с внешним видом страницы.

#### Цвета

<div class="styles" style="font-family: monospace;">
  <div style="background-color: #39b1a4">#39b1a4</div>
  <div style="background-color: white">#ffffff</div>
  <div style="background-color: #f5f5f5">#f5f5f5</div>

  <div style="background-color: #e9e9e9">#e9e9e9</div>
  <div style="background-color: #dc4d38">#dc4d38</div>
</div>

### Добавление стилистических изображений

В предыдущей главе мы добавляли на страницу контент-изображения. Их основная функция — визуально дополнять контент на странице. В отличие от них, стилистические изображения — необязательная часть контента. Однако они оживляют страницу в целом, а также могут привлекать внимание пользователя к нужной ее части.

Хорошим примером использования таких изображений является картинка в верхней половине страницы. Ее назначение — побудить пользователя почитать о продукте подробнее.

<div class="g-wide--2 g-wide--last g-medium--half g--last">
  <img  src="images/narrowsite.png" alt="Готовый сайт с дизайном" style="max-width: 100%;">
</div>

Встроить такие изображения на страницу очень просто. В нашем проекте мы поместим картинку на фон в верхней части экрана с помощью несложного кода CSS.

{% highlight css %}
#headline {
  padding: 0.8em;
  color: white;
  font-family: Roboto, sans-serif;
  background-image: url(backgroundimage.jpg);
  background-size: cover;
}
{% endhighlight %}

Чтобы фоновое изображение не отвлекало пользователя от информации на странице, мы выбрали фотографию не в фокусе. Она будет занимать все пространство на экране. Таким образом, при изменении ширины экрана фоновая картинка будет растягиваться.

<br style="clear: both;">

## Использование точек разрыва

На ширине 600 пикселей страница уже выглядит неаккуратно. Дело в том, что длина строки при таких настройках превышает удобные для восприятия 10 слов. Попробуем это исправить.

<video controls poster="images/firstbreakpoint.png" style="width: 100%;">
  <source src="videos/firstbreakpoint.mov" type="video/mov"></source>
  <source src="videos/firstbreakpoint.webm" type="video/webm"></source>
  <p>Ваш браузер не поддерживает воспроизведение видеороликов.
     <a href="videos/firstbreakpoint.mov">Скачать видеоролик</a>.
  </p>
</video>

Чтобы элементы на странице автоматически перераспределялись, нам необходимо внедрить здесь точку разрыва. Сделать это можно с помощью технологии [Media Queries]({{site.fundamentals}}/layouts/rwd-fundamentals/#use-css-media-queries-for-responsiveness).

{% highlight css %}
@media (min-width: 600px) {

}
{% endhighlight %}

На широких экранах больше места, поэтому контент на странице можно разместить в разных комбинациях.

{% include modules/remember.liquid title="Note" list=page.notes.not-all-at-once %}

В нашем случае потребуется сделать следующее:

*  задать максимальную ширину страницы;
*  изменить отступ и уменьшить размер текста;
*  определить стиль заголовка как in-line и float и подвинуть форму;
*  определить стиль видеоэлемента как float;
*  уменьшить размер изображений и расположить их в более удобной сетке.

{% include modules/related_guides.liquid inline=true list=page.related-guides.first-break-point %}

## Задание максимальной ширины

Выберем два основных вида верстки: для узких и широких экранов. Это сильно упростит нам задачу.

Для обоих видов удобнее будет располагать на странице текст без полей. Следовательно, нам необходимо задать максимальную ширину экрана, чтобы в очень широкой области просмотра текст не выстраивался в одну длинную строку. Допустим, мы выбрали максимальную ширину в 800 пикселей.

Зададим ее, не забыв расположить элементы по центру. Нам необходимо создать контейнер вокруг каждого большого раздела и применить стиль margin: 
auto. В результате на широких экранах контент будет располагаться по центру с максимальной шириной 800 пикселей.

Контейнер будет выглядеть как простой тег div:

{% highlight html %}<div class="container">...</div>{% endhighlight %}

{% include_code _code/fixingfirstbreakpoint.html containerhtml html %}

{% include_code _code/fixingfirstbreakpoint.html container css %}

## Изменение отступа и уменьшение размера текста

На узких экранах мобильных устройств места очень мало, поэтому необходимо сильно сокращать размер и вес типографики, чтобы гармонично уместить его в мобильной версии.

У устройств с большим экраном есть другая особенность: пользователь обычно находится дальше от экрана, и мелкий текст в этом случае воспринимается труднее. Чтобы это исправить, мы можем увеличить размер и вес типографики, а также изменить отступы, чтобы выделить те или иные области.

На нашей странице мы увеличим отступ до 5% от общей ширины. Также мы увеличим размер текста заголовка в каждом разделе.

{% include_code _code/fixingfirstbreakpoint.html padding css %}

## Адаптирование элементов для устройств с широким экраном

Итак, на узких экранах содержимое сайта отображается линейно. Разделы располагаются в вертикальном порядке.

На широком экране есть дополнительное место для оптимального размещения контента. Это значит, что, согласно информационной архитектуре, которую мы создали, мы можем:

*  перемещать форму для заполнения относительно заголовка;
*  расположить видеоролик справа от списка основных аспектов курса;
*  разместить изображения в разных областях экрана;
*  растянуть таблицу.

### Плавающая форма

В узкой области просмотра недостаточно места по горизонтали, чтобы в нем можно было удобно разместить все элементы.

Чтобы эффективно использовать пространство на широком экране, необходимо разбить на части контент в заголовке и поместить форму рядом со списком.

{% include_code _code/fixingfirstbreakpoint.html formfloat css %}

{% include_code _code/fixingfirstbreakpoint.html padding css %}

<video controls poster="images/floatingform.png" style="width: 100%;">
  <source src="videos/floatingform.mov" type="video/mov"></source>
  <source src="videos/floatingform.webm" type="video/webm"></source>
  <p> Ваш браузер не поддерживает проигрывание этого видеоролика.
     <a href="videos/floatingform.mov">Скачать видеоролик</a>
  </p>
</video>

### Плавающий видеоролик

На узком экране видеоролики занимают всю ширину и располагаются после списка основных аспектов курса. Если использовать эти же настройки для широкого экрана, видео слишком сильно растянется и будет отображаться некорректно.

Поэтому необходимо поместить его на одном уровне со списком, а не после него.

{% include_code _code/fixingfirstbreakpoint.html floatvideo css %}

### Размещение изображений друг за другом

Как и в случае с видео, изображения на узких дисплеях также располагаются одно под другим и их ширина соответствует ширине экрана. Если открыть страницу с такими настройками на широком экране, картинки растянутся и будут смотреться плохо.

Мы предлагаем ограничить размер изображений 30-ю процентами от общей ширины контейнера и расположить картинки горизонтально. Также мы добавим тень и небольшие отступы по краям, чтобы сделать изображения более привлекательными.

<img src="images/imageswide.png" style="width:100%">

{% include_code _code/fixingfirstbreakpoint.html tileimages css %}

### Адаптирование параметров изображения в соответствии с разрешением экрана

При работе с изображениями помимо размера области просмотра необходимо учитывать плотность данных.

Изначально стандарты, применяемые в Интернете, подразумевали, что контент будет просматриваться на устройствах с разрешением в 96dpi. С появлением мобильных устройств сильно возросла плотность пикселей на экранах. Особенно заметно это на дисплеях класса Retina. Изображения, плотность пикселей у которых составляет 96dpi, очень плохо смотрятся на таких экранах.

У нас появилось решение этой проблемы, которое пока не слишком распространено.
Некоторые браузеры позволяют добавить два варианта изображения: обычное и высококачественное. Последние будут показываться только в том случае, если экран имеет высокое разрешение.

{% highlight html %}
<img src="photo.png" srcset="photo@2x.png 2x">
{% endhighlight %}

{% include modules/related_guides.liquid inline=true list=page.related-guides.images %}

### Таблицы

Настроить отображение таблиц на устройствах с узким экраном непросто.

Если ваша таблица состоит из трех столбцов и более, мы рекомендуем разбить в ней информацию так, чтобы получилось два столбца.

<video controls poster="images/responsivetable.png" style="width: 100%;">
  <source src="videos/responsivetable.mov" type="video/mov"></source>
  <source src="videos/responsivetable.webm" type="video/webm"></source>
  <p>Ваш браузер не поддерживает воспроизведение видеоролика.
     <a href="videos/responsivetable.mov">Скачать видеоролик</a>.
  </p>
</video>

В код сайта мы вынуждены встроить еще одну точку разрыва специально для работы с таблицей.
Поскольку мы начинаем создание сайта с версии для мобильных устройств, в CSS стилях отделите секцию для узких экранов от секции для широких экранов.
Таким образом, получается отдельный раздел.

{% include_code _code/content-with-styles.html table-css css %}

## Завершение работы

**ПОЗДРАВЛЯЕМ!** Вы только что создали свою первую несложную страницу с описанием продукта. С этой страницей удобно работать на любых устройствах.

Следуйте рекомендациям ниже, и работа над отзывчивым дизайном сайта будет легкой и приятной:

1.  Создайте базовую информационную архитектуру и определите, какой контент будет на сайте перед тем, как начинать писать код.
2.  Всегда определяйте ширину области просмотра.
3.  Всегда начинайте разработку с версии для мобильных устройств.
4.  После этого увеличивайте ширину окна до тех пор, пока контент не начнет выглядеть неаккуратно. В этом месте необходимо будет встроить точку разрыва.
5.  Повторяйте последнее действие до тех пор, пока вы не достигнете максимально возможной ширины экрана.

{% include modules/nextarticle.liquid %}

{% endwrap %}

