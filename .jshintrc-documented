{
  // Enforcing options
  // ========================================================================
  "bitwise"         // warns if & and | are used (use && and || instead)
  "camelcase"       // warns if non camelCase naming is used
  "curly"           // warns if curlies are not used for every block
  "eqeqeq"          // warns if equality tests are made with double operators (used tripple instead: ===, !==)
  "forin"           // warns if for...in statements are not filtered via hasOwnProperty()
  "immed"           // warns if immediate function calls are not wrapped in parenthesis
  "indent"          // the indent to enforce
  "latedef"         // warns if something is used before declared (source order) ("nofunc" => function will be ignored)
  "newcap"          // warns if contructer names are not capitalized
  "noarg"           // warns if arguments.caller and arguments.callee are used
  "noempty"         // warns if a block is empty
  "nonew"           // warns if the new operator is used but the instance isn't stored
  "plusplus"        // warns if the increment/decrement operators are used
  "quotmark"        // the style of quotes to enforce
  "undef"           // warns if variables are used but not defined (defined, not necessarily source order)
  "unused"          // warns if there are unused variables
  "strict"          // warns if use strict is missing somewhere
  "trailing"        // warns if there is trailing whitespace
  "maxparams"       // the maximum number of parameters for a function
  "maxdepth"        // the maximum depth of a the code blocks
  "maxstatements"   // the maximum number of statements in a function
  "maxcomplexity"   // the maximum cyclomatic complexity of a function
  "maxlen"          // the maximum length of each line


  // Relaxing options
  // ========================================================================
  "asi"             // removes warnings about missing semicolons
  "boss"            // removes warnings about assignments in cases where comparisons are expected
  "debug"           // removes warnings about debugger statement left in the code
  "eqnull"          // removes warnings about comparison to null ( == null)
  "esnext"          // tells JSHint that your code use ECMAScript 6 specific syntax
  "evil"            // removes warnings about the use of eval
  "expr"            // removes warnings about the use of expressions where assignments or function calls are expected
  "funcscope"       // removes warnings about the use of variables outside of the scope they've been defined
  "globalstrict"    // removes warnings about the use of global strict mode
  "iterator"        // removes warnings about the use of __iterator__
  "lastsemic"       // removes warnings about the last missing semicolons in a one line block
  "laxbreak"        // removes warnings about unsage line breaks
  "laxcomma"        // removes warnings about comma-first coding style
  "loopfunc"        // removes warnings about creating functions in loops
  "multistr"        // removes warnings about multiline strings
  "proto"           // removes warnings about the use of __proto__
  "scripturl"       // removes warnings about the use of script-targeted URLs (javascript:...)
  "smarttabs"       // removes warnings about mixed tabs and spaces
  "shadow"          // removes warnings about variables shadowing (variables already declared in the outer scope)
  "sub"             // removes warnings about the use of [] notation when it can be expressed in dot notation
  "supernew"        // removes warnings about "weird" constructions like new function () { ... } and new Object
  "validthis"       // removes warnings about possible strict violations (in strict mode) when you use this


  // Legacy
  // ========================================================================
  "nomen"           // warns if dangling _ are used in variables
  "onevar"          // warns if there are more than one single variable statement in a function
  "white"           // if the code must be validated against Douglas Crockford's JavaScript coding style
                    // http://javascript.crockford.com/code.html


  // Environments (predefined globals)
  // ========================================================================
  "browser"         // defines globals exposed by modern browsers (document, navigator, FileReader, etc...)
  "devel"           // defines globals used for logging poor man's debugging (console, alert)
  "node"            // defines globals used by Node
  "nonstandard"     // defines non-standard but widely adopted globals such as escape and unescape
  "globals"         // exposed globals
}












